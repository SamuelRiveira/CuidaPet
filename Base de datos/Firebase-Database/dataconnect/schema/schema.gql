# # Example schema for simple movie review app

# # User table is keyed by Firebase Auth UID.
# type User @table {
#   # `@default(expr: "auth.uid")` sets it to Firebase Auth UID during insert and upsert.
#   id: String! @default(expr: "auth.uid")
#   username: String! @col(dataType: "varchar(50)")
#   # The `user: User!` field in the Review table generates the following one-to-many query field.
#   #  reviews_on_user: [Review!]!
#   # The `Review` join table the following many-to-many query field.
#   #  movies_via_Review: [Movie!]!
# }

# # Movie is keyed by a randomly generated UUID.
# type Movie @table {
#   # If you do not pass a 'key' to `@table`, Data Connect automatically adds the following 'id' column.
#   # Feel free to uncomment and customize it.
#   #  id: UUID! @default(expr: "uuidV4()")
#   title: String!
#   imageUrl: String!
#   genre: String
# }

# # MovieMetadata is a metadata attached to a Movie.
# # Movie <-> MovieMetadata is a one-to-one relationship
# type MovieMetadata @table {
#   # @unique ensures each Movie can only one MovieMetadata.
#   movie: Movie! @unique
#   # The movie field adds the following foreign key field. Feel free to uncomment and customize it.
#   #  movieId: UUID!
#   rating: Float
#   releaseYear: Int
#   description: String
# }

# # Reviews is a join table between User and Movie.
# # It has a composite primary keys `userUid` and `movieId`.
# # A user can leave reviews for many movies. A movie can have reviews from many users.
# # User  <-> Review is a one-to-many relationship
# # Movie <-> Review is a one-to-many relationship
# # Movie <-> User is a many-to-many relationship
# type Review @table(name: "Reviews", key: ["movie", "user"]) {
#   user: User!
#   # The user field adds the following foreign key field. Feel free to uncomment and customize it.
#   #  userUid: String!
#   movie: Movie!
#   # The movie field adds the following foreign key field. Feel free to uncomment and customize it.
#   #  movieId: UUID!
#   rating: Int
#   reviewText: String
#   reviewDate: Date! @default(expr: "request.time")
# }


# Esquema para Sistema de Clínica Veterinaria

# Usuario base con autenticación
type User @table(key: "id") {
  id: UUID! @default(expr: "uuidV4()")
  name: String
  email: String @unique
  password: String
  role: String  # client, employee o programmer
}

# Programador hereda de Usuario
type Programmer @table(key: "id") {
  id: UUID! @default(expr: "uuidV4()")
  # Relación uno a uno con Usuario
  user: User! @unique
  nationalId: String
  phone: String
  address: String
  hiringDate: Date
}

# Cliente hereda de Usuario
type Client @table(key: "id") {
  id: UUID! @default(expr: "uuidV4()")
  # Relación uno a uno con Usuario
  user: User! @unique
  address: String
  phone: String
  # La tabla Mascota genera el siguiente campo de consulta one-to-many
  # pets: [Pet!]!
}

# Empleado hereda de Usuario
type Employee @table(key: "id") {
  id: UUID! @default(expr: "uuidV4()")
  # Relación uno a uno con Usuario
  user: User! @unique
  specialty: String
  fullName: String
  nationalId: String
  phone: String
  address: String
  hiringDate: Date
  # Las tablas Cita y Ficha_Medica generan los siguientes campos de consulta one-to-many
  # appointments: [Appointment!]!
  # medicalRecords: [MedicalRecord!]!
}

# Mascota pertenece a un Cliente
type Pet @table(key: "id") {
  id: UUID! @default(expr: "uuidV4()")
  client: Client!
  # El campo cliente genera el siguiente campo de clave foránea
  # clientId: UUID!
  name: String
  species: String
  breed: String
  age: Int
  # Las tablas Cita y Ficha_Medica generan los siguientes campos de consulta one-to-many
  # appointments: [Appointment!]!
  # medicalRecords: [MedicalRecord!]!
}

# Cita relaciona Empleado con Mascota
type Appointment @table(key: "id") {
  id: UUID! @default(expr: "uuidV4()")
  employee: Employee!
  # El campo empleado genera el siguiente campo de clave foránea
  # employeeId: UUID!
  pet: Pet!
  # El campo mascota genera el siguiente campo de clave foránea
  # petId: UUID!
  date: Date
  time: String @col(dataType: "TIME")
  status: String @col(dataType: "ENUM('pending', 'confirmed', 'canceled')")
  reason: String
}

# Ficha Médica relaciona Empleado con Mascota
type MedicalRecord @table(key: "id") {
  id: UUID! @default(expr: "uuidV4()")
  employee: Employee!
  # El campo empleado genera el siguiente campo de clave foránea
  # employeeId: UUID!
  pet: Pet!
  # El campo mascota genera el siguiente campo de clave foránea
  # petId: UUID!
  date: Date
  diagnosis: String
  treatment: String
  observations: String
}